import math
from prettytable import PrettyTable

class CoordinateDescent:
    def __init__(self):
        self.start_x = 1.3
        self.start_y = 1.5
        self.epsilon = 0.1
        self.lambda1 = 0.5
        self.alpha = 0.3

    def func(self, x, y):
        return x * y * math.sqrt(1 - pow(x, 2) / 4 - pow(y, 2) / 9)

    def loop(self):
        x_last = self.start_x
        y_last = self.start_y
        toggle = True
        counter = 0
        counter1 = 0
        table.field_names = ["N", "x_k", "y_k", "f(x_k, y_k)", "alpha"]
        table.add_row([counter, x_last, y_last, "%.8f" %  self.func(x_last, y_last), self.alpha])
        while self.alpha > self.epsilon:
            if toggle == 0:
                if self.func(x_last + self.alpha, y_last) > self.func(x_last, y_last):
                    x_last = x_last + self.alpha
                elif self.func(x_last - self.alpha, y_last) > self.func(x_last, y_last):
                    x_last = x_last - self.alpha
                else:
                    counter1 = 1
            else:
                if self.func(x_last, y_last + self.alpha) > self.func(x_last, y_last):
                    y_last = y_last + self.alpha
                    counter1 = 0
                elif self.func(x_last, y_last - self.alpha) > self.func(x_last, y_last):
                    y_last = y_last - self.alpha
                    counter1 = 0
                else:
                    if counter1 == 1:
                        self.alpha = self.alpha * self.lambda1
                        counter1 = 0
            if toggle == True:
                toggle = False
            else:
                toggle = True
            counter = counter + 1
            table.add_row([counter, "%.5f" % x_last, "%.5f" % y_last, "%.8f" % self.func(x_last, y_last), self.alpha])

table = PrettyTable()
object1 = CoordinateDescent()
object1.loop()
print(table)
